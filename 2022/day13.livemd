<!-- livebook:{"persist_outputs":true} -->

# Day 13

```elixir
Mix.install([
  {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Section

<!-- livebook:{"attrs":{"day":"13","session_secret":"ADVENT_OF_CODE_SESSION","variable":"puzzle_input","year":"2022"},"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2022", "13", System.fetch_env!("LB_ADVENT_OF_CODE_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "[[[2],3,[],[]]]\n[[6,9,1,3,[[2,9],4,8,[9,2,1]]],[],[[3],3]]\n\n[[7,[10,[3,2,6],10,[10],[4,8,7,4,7]]],[9,8,8,7]]\n[[3,9],[2,2,[6,[1,8],[10,7,8]],[[1,9,8],[],[],[2,4,2],[3]]],[8,[],[[7]]]]\n\n[[2,[6,1,0]],[],[]]\n[[[9],[[1,4],[1,10,9,2,6],6,2],4,[[10,9,3,8],6]],[[10,[]],[[1,8],6,6,7,0],[[1,9],0,4,[3],[8,8,8,10]]],[],[8,6,3,[5]],[[10],[[6,4,2,0],6,1,8,0],0,[[9],[3,4,0,5],[10]]]]\n\n[[2,7],[1,[4,[9,9,6]],0]]\n[[[[5,2]],10,5]]\n\n[[4,2,[2,[6]],5],[],[[[8],[6,10]],4,5,[[10,0],[10,1,9,10]]]]\n[[[[3,10,2,9,10],8,[4,5,5],1],[1,4,[6,4,9],[],8]],[10,2],[[0,[4,3,1,5],[2,6,2,1,6],6,[1,1]],7]]\n\n[[[5,2,[7,9,3,2,7],4,[1,3,0,7]]],[[],[[0,0,10],[7],[10,3,0,9]]],[[8,7,6,4],10,[[1,1,0,9,2],[],[6]]],[1,[],4,10,[]],[8,0,5]]\n[[[[10,6,4],[7,2]],7,[[8,9,7,6,5],2,8]],[],[[6,8,8,[7,6,1]]],[[7,5,[6],[2,7,10,4,6],[6,7,9]],[[2,0,2,3,6],[4,1,6,7,0]],[0,0,7,2,1],[[8,7],6,[4],6,1]],[[],[],[[],[9,5,4,8,3]],2]]\n\n[[[5,[4,10,6,9],2,[4,10,9,6,4],[5,2,9,5]]],[],[[1],[[10,6,6,5,10]],6,1]]\n[[[[2,8,6],8,6,4],[[1],8,9]],[10,[],[[2,5],[10],[5,1,6,3]]],[3,[]]]\n\n[[[[10,5,5,5,4]],8],[6,[[6,7,8],[3,2,5,4,6],3,5],1,[[5,7],10,8],[9,7]],[[[],[1,5,3,9],2,10]],[],[]]\n[[[7,10,6,[2],8]],[2,[],[10,[0,2,6]]]]\n\n[[[10,9,[],3]],[[10],[7,[5,8],9]],[[0],[[4,5,1],[5]],[[]],4,[[9],4,1]]]\n[[[[],8,[1,6]],[7]],[],[[7,[6,8],0,5,0],[2,6],[[6,4,7,1]],9]]\n\n[[[],[[5],[6,9]]],[]]\n[[5],[],[[8,[5],2],[2,0,[7],[8,2,1]],[1,[4,9,3],[8,1,3,1,4],[]],6,2]]\n\n[[[[5,3,10,4,10],[5,7],[5,9,2,5,1]]],[[[1],[2],8],10,9,4,[[5,5,7,4],1,[8,9,8]]],[2,[2,8],[7,7,7,0,4]]]\n[[9,4,[5],[]],[3,2,[5],[]],[[[],[4,8],10],8,[]],[7,[[7],7],[[1,4,6,4,7]],[]],[]]\n\n[[9],[[3,4,9,8],10,1],[9,[[8,2],2,2,[1,5]]],[[[1],[6]],2],[4,7,[3],[6,6],6]]\n[[[3,[5,0]],[[3],[5,5,10,0],[],[5,8,7]],3]]\n\n[[1,[1]],[],[10,[3,[5,8],9,[2,1,9],[7,4]],6,[[1],[4,10]],[5,[5,2]]],[[5,9],[8],6]]\n[[8,7,[0,[],10],[6]],[1],[[[9,6,9,7,8],9,[8,8,10,1,0],3,0],[2,2,[10,2],0,7]]]\n\n[[[[10,4,6,3],[1,6,2]],[],7]]\n[[8,1],[5,[[],[8,9,10,1]],5]]\n\n[[],[[4,0,[3,4,4,10,1]],2,[[3,3,3,5,3],3,8],5,10],[6]]\n[[[2,4,6,[9,3],[]]],[4,[1,[8,10,3,5,2],[10,3,9],8,[7,7,3,8,4]],[4,3],10]]\n\n[[3,[8,7,[6,1,5,7]],[9,[],[0,10],[2,1,2,4]],[[2,1,7,2],0,9,8,9],[[3,1,0],10]]]\n[[3,[6,9,4],[[2,1,10],8],10],[5,7,3,[[3,8]]],[6,[8,3,3,8],7,10,5]]\n\n[[[3,3,1],0,8,[3,[7,10,0,6],[7,9,10,7,10],4,1]],[[[],[],9],[9,5,[3,2,7,8],[7]],[[10,3],3],[8,5,[5,6,2,7,0]]],[10,6],[[9,[1]],9,[[1]]]]\n[[[[4],0,6,[8,3,7,6,2],5],10,[2,[0,5],[8,10,10,10,8],1,[2,2]]],[[[4,9,1,6]],[[9,1,3,10,0],7]],[1,7,4,4,[]],[]]\n\n[[4,[1]]]\n[[[[6,2,10,9,10],10],[[7,7,0,7,10],1,7,8],[9,[2,7,0,4]],10]]\n\n[[9],[[4,[8],[4,6,6],10]],[[3],[7,8,7,7]],[[[10,7,3,2,2]],[[],[],4,1,[6,4,10,10]],7,5,[7,5,0,10,[1,5,7]]]]\n[[[[8,8,9,8],[],[9,3,3]]],[8,[2],5,7,8]]\n\n[[[],[[],9,[0,4]]],[],[],[0,[1,[1]],[6,5,[3,10,1,0,6]],2,6]]\n[[6,[[4,4],1,[6]],[[5,5],[],4],7]]\n\n[[],[6,[[8],[7,3,3,6],3,8,[]]],[[0],[],6,[5,10,2,2]],[[0,3,0],2,[[9],2],3],[9,[9],7,2,[6,[],[0,9],1,[0]]]]\n[[3,[2,[10,3,0,6],0],1,9],[2,[[6]],[],[[1,1],7,[5,6,4,2],7,8],[0,[5,8,4],[]]]]\n\n[[5,7,[[7,7,6],7,5,[3,3,10,5]],3,6]]\n[[[[0,5,7]],0,[[8,7,9,1,5]],4],[[],[7,1,[10,9,7,3]],1,2,0],[[[]],[5,9],[10,2,[8,6,7,4],[]]]]\n\n[[9,[]],[[[8,2],[6,4,9,4,9],2],[4,6,9,9],2],[[],4,[[6,2,6],[4,4,9,0],[9,9,6],[2],9],[],1],[[[3,9,0],4],6,[]],[[],4]]\n[[[],[]]]\n\n[[0],[[[9,7,7],[3]]],[4,4],[],[6,5,[8,5,[3],[3,2,10,10,8],[6]]]]\n[[[3,[3,9,9],9,[0],10]],[],[[],[],[]],[[0,[5,6,3,3,4]],3,7],[[[0,4,5,2,0],10],9,9,[[0,1],6,3]]]\n\n[[6,2],[[]],[1,5,9,[[0,8,3,5,0],[8,8,10],4,9,3],[2,[8,9],[9,8,5,0,3]]]]\n[[2,1,5,5,9],[4,7],[[[9],[4,0,4,0],3,[]],3,[2],2,5]]\n\n[[[[]],[7,2],[0,[4,1],3],10],[[9],3],[[],9,[5,[2]],5],[0,[[3],[],[9,7,5],3,2],[5],[5]]]\n[[[[9,9],3,8,3],[10,[1,6,7,6,0],3,6,[10,10]],5],[],[1,[9,9,5,3],[2,[5,5,3,8,8],3,[1,7],0]]]\n\n[[],[[7,6],[[3],[],3,[0,9],[1]],0,[6]],[6,[[10,8,5,4],3]],[]]\n[[[[],[0,1,9],1,[3],7],0,[2,[2,4,1,0,9]],[[6,3,3,3,5]],[4]],[],[],[1,[],[],5,[[],1,1,[3]]]]\n\n[[3],[[[],5,[3,1,7,2],[10,10,5],[9,4,4,7,2]]],[8,[],8,[[2]],8]]\n[[],[[3,[0,6,7]],7,7],[2,6,[2,[],[]],[],[[1,9,2,6,9],[6],[9,6,3,1],4,[]]],[6,9,[[8,10,8,5,7],[6],[3]],5],[[[5,4,6],1,[1,10,9,2,2]],[[9,8,10],9,3,[2,4,1,10,0],[4]],6,7]]\n\n[[10,5],[],[[[4,3,5],[10],[10]]," <> ...}
```

```elixir
signals =
  puzzle_input
  |> String.split("\n\n", trim: true)
  |> Enum.map(fn chunk ->
    chunk
    |> String.split("\n", trim: true)
    |> Enum.map(&Code.string_to_quoted!/1)
  end)
```

<!-- livebook:{"output":true} -->

```
[
  [[[[2], 3, [], []]], [[6, 9, 1, 3, [[2, 9], 4, 8, [9, 2, 1]]], [], [[3], 3]]],
  [
    [[7, [10, [3, 2, 6], 10, '\n', [4, 8, 7, 4, 7]]], '\t\b\b\a'],
    [[3, 9], [2, 2, [6, [1, 8], '\n\a\b'], [[1, 9, 8], [], [], [2, 4, 2], [3]]], [8, [], ['\a']]]
  ],
  [
    [[2, [6, 1, 0]], [], []],
    [
      ['\t', [[1, 4], [1, 10, 9, 2, 6], 6, 2], 4, [[10, 9, 3, 8], 6]],
      [[10, []], [[1, 8], 6, 6, 7, 0], [[1, 9], 0, 4, [3], '\b\b\b\n']],
      [],
      [8, 6, 3, [5]],
      ['\n', [[6, 4, 2, 0], 6, 1, 8, 0], 0, ['\t', [3, 4, 0, 5], '\n']]
    ]
  ],
  [[[2, 7], [1, [4, [9, 9, 6]], 0]], [[[[5, 2]], 10, 5]]],
  [
    [[4, 2, [2, [6]], 5], [], [['\b', [6, 10]], 4, 5, [[10, 0], [10, 1, 9, 10]]]],
    [
      [[[3, 10, 2, 9, 10], 8, [4, 5, 5], 1], [1, 4, [6, 4, 9], [], 8]],
      [10, 2],
      [[0, [4, 3, 1, 5], [2, 6, 2, 1, 6], 6, [1, 1]], 7]
    ]
  ],
  [
    [
      [[5, 2, [7, 9, 3, 2, 7], 4, [1, 3, 0, 7]]],
      [[], [[0, 0, 10], '\a', [10, 3, 0, 9]]],
      [[8, 7, 6, 4], 10, [[1, 1, 0, 9, 2], [], [6]]],
      [1, [], 4, 10, []],
      [8, 0, 5]
    ],
    [
      [[[10, 6, 4], [7, 2]], 7, [[8, 9, 7, 6, 5], 2, 8]],
      [],
      [[6, 8, 8, [7, 6, 1]]],
      [
        [7, 5, [6], [2, 7, 10, 4, 6], [6, 7, 9]],
        [[2, 0, 2, 3, 6], [4, 1, 6, 7, 0]],
        [0, 0, 7, 2, 1],
        ['\b\a', 6, [4], 6, 1]
      ],
      [[], [], [[], [9, 5, 4, 8, 3]], 2]
    ]
  ],
  [
    [[[5, [4, 10, 6, 9], 2, [4, 10, 9, 6, 4], [5, 2, 9, 5]]], [], [[1], [[10, 6, 6, 5, 10]], 6, 1]],
    [[[[2, 8, 6], 8, 6, 4], [[1], 8, 9]], [10, [], [[2, 5], '\n', [5, 1, 6, 3]]], [3, []]]
  ],
  [
    [
      [[[10, 5, 5, 5, 4]], 8],
      [6, [[6, 7, 8], [3, 2, 5, 4, 6], 3, 5], 1, [[5, 7], 10, 8], '\t\a'],
      [[[], [1, 5, 3, 9], 2, 10]],
      [],
      []
    ],
    [[[7, 10, 6, [2], 8]], [2, [], [10, [0, 2, 6]]]]
  ],
  [
    [[[10, 9, [], 3]], ['\n', [7, [5, 8], 9]], [[0], [[4, 5, 1], [5]], [[]], 4, ['\t', 4, 1]]],
    [[[[], 8, [1, 6]], '\a'], [], [[7, [6, 8], 0, 5, 0], [2, 6], [[6, 4, 7, 1]], 9]]
  ],
  [
    [[[], [[5], [6, 9]]], []],
    [[5], [], [[8, [5], 2], [2, 0, '\a', [8, 2, 1]], [1, [4, 9, 3], [8, 1, 3, 1, 4], []], 6, 2]]
  ],
  [
    [
      [[[5, 3, 10, 4, 10], [5, 7], [5, 9, 2, 5, 1]]],
      [[[1], [2], 8], 10, 9, 4, [[5, 5, 7, 4], 1, '\b\t\b']],
      [2, [2, 8], [7, 7, 7, 0, 4]]
    ],
    [
      [9, 4, [5], []],
      [3, 2, [5], []],
      [[[], [4, 8], 10], 8, []],
      [7, ['\a', 7], [[1, 4, 6, 4, 7]], []],
      []
    ]
  ],
  [
    [
      '\t',
      [[3, 4, 9, 8], 10, 1],
      [9, [[8, 2], 2, 2, [1, 5]]],
      [[[1], [6]], 2],
      [4, 7, [3], [6, 6], 6]
    ],
    [[[3, [5, 0]], [[3], [5, 5, 10, 0], [], [5, 8, 7]], 3]]
  ],
  [
    [
      [1, [1]],
      [],
      [10, [3, [5, 8], 9, [2, 1, 9], [7, 4]], 6, [[1], [4, 10]], [5, [5, 2]]],
      [[5, 9], '\b', 6]
    ],
    [
      [8, 7, [0, [], 10], [6]],
      [1],
      [[[9, 6, 9, 7, 8], 9, [8, 8, 10, 1, 0], 3, 0], [2, 2, [10, 2], 0, 7]]
    ]
  ],
  [[[[[10, 4, 6, 3], [1, 6, 2]], [], 7]], [[8, 1], [5, [[], [8, 9, 10, 1]], 5]]],
  [
    [[], [[4, 0, [3, 4, 4, 10, 1]], 2, [[3, 3, 3, 5, 3], 3, 8], 5, 10], [6]],
    [
      [[2, 4, 6, [9, 3], []]],
      [4, [1, [8, 10, 3, 5, 2], [10, 3, 9], 8, [7, 7, 3, 8, 4]], [4, 3], 10]
    ]
  ],
  [
    [
      [
        3,
        [8, 7, [6, 1, 5, 7]],
        [9, [], [0, 10], [2, 1, 2, 4]],
        [[2, 1, 7, 2], 0, 9, 8, 9],
        [[3, 1, 0], 10]
      ]
    ],
    [[3, [6, 9, 4], [[2, 1, 10], 8], 10], [5, 7, 3, [[3, 8]]], [6, [8, 3, 3, 8], 7, 10, 5]]
  ],
  [
    [
      [[3, 3, 1], 0, 8, [3, [7, 10, 0, 6], '\a\t\n\a\n', 4, 1]],
      [[[], [], 9], [9, 5, [3, 2, 7, 8], '\a'], [[10, 3], 3], [8, 5, [5, 6, 2, 7, 0]]],
      [10, 6],
      [[9, [1]], 9, [[1]]]
    ],
    [
      [[[4], 0, 6, [8, 3, 7, 6, 2], 5], 10, [2, [0, 5], '\b\n\n\n\b', 1, [2, 2]]],
      [[[4, 9, 1, 6]], [[9, 1, 3, 10, 0], 7]],
      [1, 7, 4, 4, []],
      []
    ]
  ],
  [[[4, [1]]], [[[[6, 2, 10, 9, 10], 10], [[7, 7, 0, 7, 10], 1, 7, 8], [9, [2, 7, 0, 4]], 10]]],
  [
    [
      '\t',
      [[4, '\b', [4, 6, 6], 10]],
      [[3], '\a\b\a\a'],
      [[[10, 7, 3, 2, 2]], [[], [], 4, 1, [6, 4, 10, 10]], 7, 5, [7, 5, 0, 10, [1, 5, 7]]]
    ],
    [[['\b\b\t\b', [], [9, 3, 3]]], [8, [2], 5, 7, 8]]
  ],
  [
    [[[], [[], 9, [0, 4]]], [], [], [0, [1, [1]], [6, 5, [3, 10, 1, 0, 6]], 2, 6]],
    [[6, [[4, 4], 1, [6]], [[5, 5], [], 4], 7]]
  ],
  [
    [
      [],
      [6, ['\b', [7, 3, 3, 6], 3, 8, []]],
      [[0], [], 6, [5, 10, 2, 2]],
      [[0, 3, 0], 2, ['\t', 2], 3],
      [9, '\t', 7, 2, [6, [], [0, 9], 1, [0]]]
    ],
    [
      [3, [2, [10, 3, 0, 6], 0], 1, 9],
      [2, [[6]], [], [[1, 1], 7, [5, 6, 4, 2], 7, 8], [0, [5, 8, 4], []]]
    ]
  ],
  [
    [[5, 7, [[7, 7, 6], 7, 5, [3, 3, 10, 5]], 3, 6]],
    [
      [[[0, 5, 7]], 0, [[8, 7, 9, 1, 5]], 4],
      [[], [7, 1, [10, 9, 7, 3]], 1, 2, 0],
      [[[]], [5, 9], [10, 2, [8, 6, 7, 4], []]]
    ]
  ],
  [
    [
      [9, []],
      [[[8, 2], [6, 4, 9, 4, 9], 2], [4, 6, 9, 9], 2],
      [[], 4, [[6, 2, 6], [4, 4, 9, 0], [9, 9, 6], [2], 9], [], 1],
      [[[3, 9, 0], 4], 6, []],
      [[], 4]
    ],
    [[[], []]]
  ],
  [
    [[0], [['\t\a\a', [3]]], [4, 4], [], [6, 5, [8, 5, [3], [3, 2, 10, 10, 8], [6]]]],
    [
      [[3, [3, 9, 9], 9, [0], 10]],
      [],
      [[], [], []],
      [[0, [5, 6, 3, 3, 4]], 3, 7],
      [[[0, 4, 5, 2, 0], 10], 9, 9, [[0, 1], 6, 3]]
    ]
  ],
  [
    [[6, 2], [[]], [1, 5, 9, [[0, 8, 3, 5, 0], '\b\b\n', 4, 9, 3], [2, '\b\t', [9, 8, 5, 0, 3]]]],
    [[2, 1, 5, 5, 9], [4, 7], [['\t', [4, 0, 4, 0], 3, []], 3, [2], 2, 5]]
  ],
  [
    [
      [[[]], [7, 2], [0, [4, 1], 3], 10],
      ['\t', 3],
      [[], 9, [5, [2]], 5],
      [0, [[3], [], [9, 7, 5], 3, 2], [5], [5]]
    ],
    [
      [['\t\t', 3, 8, 3], [10, [1, 6, 7, 6, 0], 3, 6, '\n\n'], 5],
      [],
      [1, [9, 9, 5, 3], [2, [5, 5, 3, 8, 8], 3, [1, 7], 0]]
    ]
  ],
  [
    [[], [[7, 6], [[3], [], 3, [0, 9], [1]], 0, [6]], [6, [[10, 8, 5, 4], 3]], []],
    [
      [[[], [0, 1, 9], 1, [3], 7], 0, [2, [2, 4, 1, 0, 9]], [[6, 3, 3, 3, 5]], [4]],
      [],
      [],
      [1, [], [], 5, [[], 1, 1, [3]]]
    ]
  ],
  [
    [[3], [[[], 5, [3, 1, 7, 2], [10, 10, 5], [9, 4, 4, 7, 2]]], [8, [], 8, [[2]], 8]],
    [
      [],
      [[3, [0, 6, 7]], 7, 7],
      [2, 6, [2, [], []], [], [[1, 9, 2, 6, 9], [6], [9, 6, 3, 1], 4, []]],
      [6, 9, [[8, 10, 8, 5, 7], [6], [3]], 5],
      [[[5, 4, 6], 1, [1, 10, 9, 2, 2]], ['\t\b\n', 9, 3, [2, 4, 1, 10, 0], [4]], 6, 7]
    ]
  ],
  [
    [[10, 5], [], [[[4, 3, 5], '\n', '\n'], 10, 8, 2, []], [[]], [5, 0]],
    [
      [[], 6, [5, 10]],
      [[4, 3, [9, 1, 10, 0, 10], [6]], [[0, 2, 6, 5]], 7, [2, 7, [], 7, [7, 8, 3, 2]]],
      [[7, [5, 4, 8, 4], 0, 4, '\b'], 3]
    ]
  ],
  [
    [
      [[[10, 2, 1], [3], 3], [[3, 6], [3, 10, 2, 8], [], 6], 8, [[], 8, 8]],
      [[[2, 5, 0, 9], 10], [[8, 8, 0, 2], [6], '\b'], ['\n', [5, 7, 8]], 10],
      [[6], 9],
      [[[], [4, 2, 9, 3, 10], 0, [2], 9]]
    ],
    [
      [[[0, 6, 6, 2], [6, 9, 6, 6, 1]], [[], 5], 6, 0],
      [[[4, 9, 1, 3, 0]], 7, 3, 2],
      [8, [], 10, ['\t', [3, 8], 0, [8, 1, 10]]],
      [[[5, 8], [1, 6, 0, 6]]],
      [
        [1, 8, 8, [4, 1, 10, 3]],
        [[8, 1, 4, 6, 1], [], [6, 0, 1, 8], 0],
        7,
        6,
        [2, [2, 4, 4, 9, 0], 10, []]
      ]
    ]
  ],
  [
    [
      [[[5], 1, [], 1, 1], [[3, 10, 6, 4], 2, [6, 8, 2], 7], [7, [7, 0, 8, 10, 8], 1], 10, 1],
      [
        ['\t\a', 10, '\a', 8],
        [8, [9, 10, 6, 10], 0, [1, 10]],
        [[], [10, 3, 4], [8, 3, 0, 7, 7], [6, 8], 3],
        1
      ],
      [
        4,
        [[], [0, 2, 1, 6], [], 10, [9, 10, 5, 9, 0]],
        [6, [5], [6, 10, 0, 5, 7], [2, 6, 0, 8], []]
      ]
    ],
    ['\t\b']
  ],
  [
    [
      [0, []],
      [[5], 10, 5, [[4, 10, 8]]],
      [[], [[], [8, 1, 7], 2], [[4]], 4],
      [[], []],
      [7, [2, 6], 9, [3, [2, 4, 4, 3], 7]]
    ],
    [[7, 3, 7, [2, 6, [0, 1, 10, 3], '\a'], 10], [], []]
  ],
  [[[5, 10, 1, [[0, 4, 4, 3], [7, 4, 8, 2, 8], 0]]], [[], [10, [], [[8, 10, 9, 7, 0], 0, 7, 9]]]],
  [
    [[8, [7, [5]]], [7, 9, [8, 9, [5, 3], 1, 10]]],
    [[6, 2, [[7, 4, 6], 1, 6, [3]]], [5, 6, 4, [[3, 3, 5, 3]]], [7, []], '\t', [4]]
  ],
  [
    [[0, [[1], 10, 3, 8, 9], 6]],
    [
      [[6, 1], 0, 5],
      [7, ['\t\t', 3], []],
      [[5, 4, [0, 10, 4, 9]], 10, 5, [[9, 5, 2, 8, 8], 8, 2, [1, 9, ...]]]
    ]
  ],
  [
    [
      '\t',
      [[[], [1, 9, 9, 0, 6], [9, 1, 7, 5, 0]], 4, 5, 3],
      [[], [[9, 9, 10, 3], 2, [], 6, 0]],
      []
    ],
    [[[], 2, 7], [[1, 7, [4, 2], 8], 10]]
  ],
  [
    [[3, 9, 5, 7, 8], [], [6, 9], [9, [], 7]],
    [
      [['\n', 8, 0, [3, 7, 5, 5]]],
      [0, [5, 1, [10, 1, 1], [6]]],
      [[[2, 8, 6], [1, 4, 6], [5, 1], [6, 3]]],
      [[0, 7, 0], [6, [8, 2, 0, ...], '\b\t', [7, ...]], [7, 2, 7, [...], ...]],
      [[[], [], [3, 4, ...], '\b'], 5, 4]
    ]
  ],
  [
    [
      [10, 5],
      [],
      [[[3, 10], 1, [6, 4, 0], 5, 4], 6, [[], 4, [0], [7, ...]], '\n', 5],
      [1, [[9, 0]]],
      [9, 1, 4, 4, 4]
    ],
    [
      [0, 6, [[0, 6, 9]]],
      [],
      [3, [9, 5, [4, 7, ...], [2, ...], [...]], 9, 3, [[9, ...]]],
      [[2, 0], [5, [10, 2], [0, ...]], 0, [[4, ...], [...], ...]]
    ]
  ],
  [
    [
      [9, 9, 5, 0, 10],
      [],
      [[6], 1],
      [9, 6, [], [[6, ...], [], ...]],
      [6, [2, [4, ...], [...]], [4, [...], ...], 0, []]
    ],
    [[], [5, 9, 5, [[1, 3, ...], 4, 10, ...], [3]], []]
  ],
  [
    [
      [1, 1],
      [7, ['\t\b', []], 5],
      [['\a\b\a', 8, [6, 0], [2, ...], [...]], 9, 10],
      [[8, 7, [6, ...]], [[2, 3], 2, 7, ...], []],
      '\a'
    ],
    [
      [[[0, 8, 8, 4, 6], '\a\a\n\t', 10, [8, 9, ...], 4], [[8, 7, 6, 7]], [5, 8, []]],
      [],
      [[0, 0, 1]],
      [],
      [8, [], 4]
    ]
  ],
  [
    [
      [3, [[], [], [10, 5, ...]], 8, 1, [[1, ...], [...], ...]],
      [9, 7, [10, 5]],
      [[[], [5, 0, ...], 7], '\b\b'],
      [5, [1, 8, ...]]
    ],
    [[[[3, 8, 4], [], [1, 3, ...], 8], 1, [5, [4, ...], '\b'], [[5, ...], 3, ...]]]
  ],
  [
    [[3, [9, [4, 4], [6], 6], 9, 10, 5], [], [[0, 0, [...]], 0], [8, [5, ...], 0, ...], []],
    [[10, [], '\a', [[...]]], [], [[[8, ...], 1, ...]]]
  ],
  [
    [
      [[[8, 6, 1], 5, [1, ...], [...], ...], [0, 6, [], ...], 9, [[...]], 1],
      [1, 3, 1],
      [['\n\t\a\b', 8, ...], [9, ...], [...], ...]
    ],
    [[[], 2, 10, [...], ...], [7, 2, 4, ...], [[[], ...]]]
  ],
  [
    [[], [10, [4, ...], [...], ...], [[5, ...], [], ...], [[...]]],
    [[['\n'], [8, ...], [...]], [6], [], [...]]
  ],
  [[0, 3, 2, 5], [0, 3, 2, ...]],
  [[[[2, ...], 9, ...], [[...], ...], [...], ...], [[9, ...], [...]]],
  [[[[...], ...], [...]], [[...], ...]],
  [[[...], ...], [...]],
  [[...], ...],
  [...],
  ...
]
```

```elixir
defmodule Signal do
  def compare(a, a), do: :eq
  def compare(a, b) when is_integer(a) and is_integer(b) and a < b, do: :lt
  def compare([], [_ | _]), do: :lt
  def compare([a | as], [b | bs]), do: with(:eq <- compare(a, b), do: compare(as, bs))

  def compare(a, b)
      when is_integer(a) and is_list(b)
      when is_list(a) and is_integer(b),
      do: compare(List.wrap(a), List.wrap(b))

  def compare(_, _), do: :gt
end
```

<!-- livebook:{"output":true} -->

```
{:module, Signal, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:compare, 2}}
```

## Task 1

```elixir
signals
|> Enum.with_index(1)
|> Enum.filter(fn {[a, b], _idx} -> Signal.compare(a, b) != :gt end)
|> Enum.map(&elem(&1, 1))
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
6656
```

## Task 2

```elixir
div1 = [[2]]
div2 = [[6]]

signals
|> Enum.concat([[div1], [div2]])
|> Enum.concat()
|> Enum.sort(Signal)
|> Enum.with_index(1)
|> Enum.filter(fn {packet, _idx} -> packet in [div1, div2] end)
|> Enum.map(&elem(&1, 1))
|> Enum.product()
```

<!-- livebook:{"output":true} -->

```
19716
```
