<!-- livebook:{"persist_outputs":true} -->

# Day 09

```elixir
Mix.install([:kino_aoc])
```

## Section

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"9","session_secret":"ADVENT_OF_CODE_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "9", System.fetch_env!("LB_ADVENT_OF_CODE_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "27 49 92 176 327 586 1039 1879 3511 6711 12850 24194 44291 78456 134365 222769 358339 560653 855336 1275364 1862543\n15 25 36 57 117 286 706 1643 3584 7420 14791 28745 55012 104457 197703 373565 703877 1318603 2446886 4482001 8081143\n2 -1 -1 5 35 140 429 1101 2482 5067 9586 17171 29829 51664 91688 169675 327410 648943 1295161 2560233 4960367\n17 40 75 124 195 314 553 1083 2269 4852 10332 21799 45683 95258 197352 404834 819561 1634448 3210609 6218318 11892083\n12 28 47 77 148 320 690 1410 2740 5170 9648 17942 33138 60228 106667 182671 300884 474856 715541 1024739 1384064\n23 34 56 98 179 335 630 1192 2323 4773 10330 22981 51089 111404 236460 488303 984007 1942732 3771076 7214380 13617999\n-3 9 34 76 147 268 465 760 1157 1623 2064 2296 2011 738 -2201 -7740 -17123 -31963 -54306 -86700 -132269\n2 5 10 28 85 240 617 1451 3148 6359 12068 21694 37207 61258 97323 149861 224486 328153 469358 658352 907369\n2 8 19 26 30 54 164 525 1536 4108 10175 23584 51670 108250 219765 438340 869318 1727304 3445143 6876026 13651774\n-7 -3 9 42 129 327 726 1476 2850 5366 9996 18495 33888 61158 108183 186975 315279 518595 832691 1306680 2006739\n14 15 24 47 93 174 306 517 868 1493 2664 4887 9035 16524 29538 51309 86458 141403 224840 348303 526809\n-4 10 50 125 241 410 669 1105 1873 3186 5269 8334 12802 20376 37376 83418 211850 554706 1416484 3461131 8070127\n15 39 76 141 268 519 996 1856 3329 5739 9528 15283 23766 35947 53040 76542 108275 150431 205620 276921 367936\n24 38 52 61 53 10 -73 -138 42 1075 4356 12809 32195 73394 156469 318214 626801 1211053 2319569 4439602 8532786\n4 10 36 100 243 556 1233 2668 5629 11577 23262 45830 88824 169667 319485 592472 1080426 1934604 3397664 5849192 9869161\n-4 7 35 84 170 335 665 1316 2552 4799 8719 15308 26022 42935 68933 107948 165236 247703 364283 526372 748322\n-7 4 31 85 196 437 976 2172 4734 9973 20207 39455 74747 138831 256043 475047 895657 1722829 3370197 6649632 13104456\n16 32 58 111 217 410 745 1344 2499 4865 9805 20028 40853 82880 167863 341774 703534 1466538 3085872 6511449 13672565\n-5 -11 -19 -29 -41 -55 -71 -89 -109 -131 -155 -181 -209 -239 -271 -305 -341 -379 -419 -461 -505\n5 8 27 84 220 507 1078 2190 4332 8382 15798 28785 50293 83555 130708 190077 252623 301509 328232 401228 871348\n22 31 48 86 172 357 726 1417 2671 4960 9297 17952 36037 74887 159044 340266 724833 1525270 3155647 6402851 12728283\n13 26 37 45 58 113 311 867 2175 4888 10013 19021 33972 57655 93743 146963 223281 330102 476485 673373 933838\n12 37 78 151 286 522 901 1478 2383 3991 7275 14433 29888 61749 123771 237731 435898 762853 1275224 2036831 3105150\n8 21 55 123 237 408 646 960 1358 1847 2433 3121 3915 4818 5832 6958 8196 9545 11003 12567 14233\n3 19 44 71 100 149 259 491 916 1602 2605 3974 5783 8206 11654 16996 25889 41245 67866 113281 188822\n8 19 57 138 279 498 814 1247 1818 2549 3463 4584 5937 7548 9444 11653 14204 17127 20453 24214 28443\n9 4 5 23 80 223 554 1285 2829 5953 12058 23725 45786 87356 165507 311589 581617 1072658 1947779 3472867 6069516\n4 5 15 44 100 191 336 594 1120 2264 4761 10142 21660 46317 99077 211200 446093 928628 1898502 3807091 7495429\n15 29 52 91 168 327 635 1168 1976 3031 4181 5172 5894 7252 13693 39949 128019 387751 1089032 2861339 7106618\n4 27 76 163 300 499 772 1131 1588 2155 2844 3667 4636 5763 7060 8539 10212 12091 14188 16515 19084\n0 14 49 126 288 620 1290 2632 5308 10611 21004 41028 78750 147953 271285 484572 842448 1425348 2347731 3767130 5893244\n3 5 19 56 140 317 663 1291 2357 4065 6671 10486 15878 23273 33155 46065 62599 83405 109179 140660 178624\n15 24 50 100 174 275 432 735 1381 2730 5370 10190 18460 31917 52856 84225 129723 193900 282258 401352 558890\n3 10 28 67 151 337 751 1653 3540 7288 14321 26777 47618 80603 130010 199955 293113 408598 538706 664167 747489\n20 41 74 126 209 345 579 1013 1892 3804 8106 17770 38987 84130 177153 363333 726644 1420251 2718970 5107486 9425181\n15 27 39 51 63 75 87 99 111 123 135 147 159 171 183 195 207 219 231 243 255\n8 21 58 139 303 630 1288 2630 5374 10904 21738 42245 79828 147184 267217 484267 889432 1675307 3248534 6450147 12967977\n12 18 24 30 36 42 48 54 60 66 72 78 84 " <> ...}
```

```elixir
lines =
  puzzle_input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    line
    |> String.split()
    |> Enum.map(&String.to_integer/1)
  end)
```

<!-- livebook:{"output":true} -->

```
[
  [27, 49, 92, 176, 327, 586, 1039, 1879, 3511, 6711, 12850, 24194, 44291, 78456, 134365, 222769,
   358339, 560653, 855336, 1275364, 1862543],
  [15, 25, 36, 57, 117, 286, 706, 1643, 3584, 7420, 14791, 28745, 55012, 104457, 197703, 373565,
   703877, 1318603, 2446886, 4482001, 8081143],
  [2, -1, -1, 5, 35, 140, 429, 1101, 2482, 5067, 9586, 17171, 29829, 51664, 91688, 169675, 327410,
   648943, 1295161, 2560233, 4960367],
  [17, 40, 75, 124, 195, 314, 553, 1083, 2269, 4852, 10332, 21799, 45683, 95258, 197352, 404834,
   819561, 1634448, 3210609, 6218318, 11892083],
  [12, 28, 47, 77, 148, 320, 690, 1410, 2740, 5170, 9648, 17942, 33138, 60228, 106667, 182671,
   300884, 474856, 715541, 1024739, 1384064],
  [23, 34, 56, 98, 179, 335, 630, 1192, 2323, 4773, 10330, 22981, 51089, 111404, 236460, 488303,
   984007, 1942732, 3771076, 7214380, 13617999],
  [-3, 9, 34, 76, 147, 268, 465, 760, 1157, 1623, 2064, 2296, 2011, 738, -2201, -7740, -17123,
   -31963, -54306, -86700, -132269],
  [2, 5, 10, 28, 85, 240, 617, 1451, 3148, 6359, 12068, 21694, 37207, 61258, 97323, 149861, 224486,
   328153, 469358, 658352, 907369],
  [2, 8, 19, 26, 30, 54, 164, 525, 1536, 4108, 10175, 23584, 51670, 108250, 219765, 438340, 869318,
   1727304, 3445143, 6876026, 13651774],
  [-7, -3, 9, 42, 129, 327, 726, 1476, 2850, 5366, 9996, 18495, 33888, 61158, 108183, 186975,
   315279, 518595, 832691, 1306680, 2006739],
  [14, 15, 24, 47, 93, 174, 306, 517, 868, 1493, 2664, 4887, 9035, 16524, 29538, 51309, 86458,
   141403, 224840, 348303, 526809],
  [-4, 10, 50, 125, 241, 410, 669, 1105, 1873, 3186, 5269, 8334, 12802, 20376, 37376, 83418, 211850,
   554706, 1416484, 3461131, 8070127],
  [15, 39, 76, 141, 268, 519, 996, 1856, 3329, 5739, 9528, 15283, 23766, 35947, 53040, 76542,
   108275, 150431, 205620, 276921, 367936],
  [24, 38, 52, 61, 53, 10, -73, -138, 42, 1075, 4356, 12809, 32195, 73394, 156469, 318214, 626801,
   1211053, 2319569, 4439602, 8532786],
  [4, 10, 36, 100, 243, 556, 1233, 2668, 5629, 11577, 23262, 45830, 88824, 169667, 319485, 592472,
   1080426, 1934604, 3397664, 5849192, 9869161],
  [-4, 7, 35, 84, 170, 335, 665, 1316, 2552, 4799, 8719, 15308, 26022, 42935, 68933, 107948, 165236,
   247703, 364283, 526372, 748322],
  [-7, 4, 31, 85, 196, 437, 976, 2172, 4734, 9973, 20207, 39455, 74747, 138831, 256043, 475047,
   895657, 1722829, 3370197, 6649632, 13104456],
  [16, 32, 58, 111, 217, 410, 745, 1344, 2499, 4865, 9805, 20028, 40853, 82880, 167863, 341774,
   703534, 1466538, 3085872, 6511449, 13672565],
  [-5, -11, -19, -29, -41, -55, -71, -89, -109, -131, -155, -181, -209, -239, -271, -305, -341,
   -379, -419, -461, -505],
  [5, 8, 27, 84, 220, 507, 1078, 2190, 4332, 8382, 15798, 28785, 50293, 83555, 130708, 190077,
   252623, 301509, 328232, 401228, 871348],
  [22, 31, 48, 86, 172, 357, 726, 1417, 2671, 4960, 9297, 17952, 36037, 74887, 159044, 340266,
   724833, 1525270, 3155647, 6402851, 12728283],
  [13, 26, 37, 45, 58, 113, 311, 867, 2175, 4888, 10013, 19021, 33972, 57655, 93743, 146963, 223281,
   330102, 476485, 673373, 933838],
  [12, 37, 78, 151, 286, 522, 901, 1478, 2383, 3991, 7275, 14433, 29888, 61749, 123771, 237731,
   435898, 762853, 1275224, 2036831, 3105150],
  [8, 21, 55, 123, 237, 408, 646, 960, 1358, 1847, 2433, 3121, 3915, 4818, 5832, 6958, 8196, 9545,
   11003, 12567, 14233],
  [3, 19, 44, 71, 100, 149, 259, 491, 916, 1602, 2605, 3974, 5783, 8206, 11654, 16996, 25889, 41245,
   67866, 113281, 188822],
  [8, 19, 57, 138, 279, 498, 814, 1247, 1818, 2549, 3463, 4584, 5937, 7548, 9444, 11653, 14204,
   17127, 20453, 24214, 28443],
  [9, 4, 5, 23, 80, 223, 554, 1285, 2829, 5953, 12058, 23725, 45786, 87356, 165507, 311589, 581617,
   1072658, 1947779, 3472867, 6069516],
  [4, 5, 15, 44, 100, 191, 336, 594, 1120, 2264, 4761, 10142, 21660, 46317, 99077, 211200, 446093,
   928628, 1898502, 3807091, 7495429],
  [15, 29, 52, 91, 168, 327, 635, 1168, 1976, 3031, 4181, 5172, 5894, 7252, 13693, 39949, 128019,
   387751, 1089032, 2861339, 7106618],
  [4, 27, 76, 163, 300, 499, 772, 1131, 1588, 2155, 2844, 3667, 4636, 5763, 7060, 8539, 10212,
   12091, 14188, 16515, ...],
  [0, 14, 49, 126, 288, 620, 1290, 2632, 5308, 10611, 21004, 41028, 78750, 147953, 271285, 484572,
   842448, 1425348, 2347731, ...],
  [3, 5, 19, 56, 140, 317, 663, 1291, 2357, 4065, 6671, 10486, 15878, 23273, 33155, 46065, 62599,
   83405, ...],
  [15, 24, 50, 100, 174, 275, 432, 735, 1381, 2730, 5370, 10190, 18460, 31917, 52856, 84225, 129723,
   ...],
  [3, 10, 28, 67, 151, 337, 751, 1653, 3540, 7288, 14321, 26777, 47618, 80603, 130010, 199955, ...],
  [20, 41, 74, 126, 209, 345, 579, 1013, 1892, 3804, 8106, 17770, 38987, 84130, 177153, ...],
  [15, 27, 39, 51, 63, 75, 87, 99, 111, 123, 135, 147, 159, 171, ...],
  [8, 21, 58, 139, 303, 630, 1288, 2630, 5374, 10904, 21738, 42245, 79828, ...],
  [12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, ...],
  [0, 4, 25, 68, 141, 272, 548, 1191, 2693, 6050, 13171, ...],
  [4, -3, -3, 13, 61, 170, 394, 850, 1809, 3869, ...],
  [-7, -12, -10, 18, 99, 265, 551, 994, 1633, ...],
  [10, 11, 22, 61, 152, 325, 616, 1067, ...],
  [-3, 8, 30, 79, 184, 392, 785, ...],
  [2, 3, 19, 75, 213, 511, ...],
  [1, 16, 38, 75, 146, ...],
  [3, 25, 64, 128, ...],
  [15, 31, 66, ...],
  [27, 52, ...],
  [6, ...],
  [...],
  ...
]
```

```elixir
defmodule Day09 do
  def extrapolate(list, field \\ &List.last/1) do
    reduce(list, [field.(list)], field)
  end

  defp reduce(list, acc, field) do
    if Enum.all?(list, &(&1 == 0)) do
      acc
    else
      new =
        list
        |> Enum.chunk_every(2, 1, :discard)
        |> Enum.map(fn [a, b] -> b - a end)

      reduce(new, [field.(new) | acc], field)
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day09, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:reduce, 3}}
```

## Part 1

```elixir
lines
|> Enum.map(fn line ->
  Day09.extrapolate(line)
  |> Enum.reduce(&+/2)
end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
1842168671
```

## Part 2

```elixir
lines
|> Enum.map(fn line ->
  Day09.extrapolate(line, &List.first/1)
  |> Enum.reduce(&-/2)
end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
903
```

<!-- livebook:{"offset":11034,"stamp":{"token":"XCP.4niSRZnU_1qf0GtnoryY24xBSp3eHuDV770anpiMIG4QlQY1-YQrGuwXL43UbHafeRUdUytg7ITWDNnIHchGL1JYNXi-59qaGTyx0nfkbcwCqqLa0ukaCsTcU-1fFxEk3w","version":2}} -->
